# -*- coding: utf-8 -*-
"""Klasifikasi_Submission_OBESITY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hm8uuXezcmNHH-KP7XyZFxC3restMGdb

# **1. Import Library**

Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

from google.colab import drive
drive.mount('/content/drive')

#Type your code here
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

"""# **Memuat Dataset**"""

#Type your code here
df = pd.read_csv('/content/drive/MyDrive/obesity/obesity_data.csv')
df.head()

"""# **Exploratory Data Analysis (EDA)**

### Exploratory Data Analysis - Deskripsi Variabel
"""

df.info()

print(f'Jumlah baris dan kolom: {df.shape}')

df.describe()

df['ObesityCategory'].value_counts()

df.isna().sum()

print(f' Jumlah duplikasi data: {df.duplicated().sum()}')

"""#### Visualisasi boxplot"""

sns.boxplot(x=df['Height'])

sns.boxplot(x=df['Age'])

sns.boxplot(x=df['Weight'])

sns.boxplot(x=df['BMI'])

sns.boxplot(x=df['PhysicalActivityLevel'])

"""**Insight:** Bedasarkan visualisasi Boxplot di atas terdapat outlier pada kolom *Height, Weight,* dan kolom *BMI*

#### Menangani outliers
"""

# Salin dataframe supaya data asli tetap aman
df_clean = df.copy()

# Loop untuk tiap fitur
for feature in df.select_dtypes(include='number'):
    Q1 = df_clean[feature].quantile(0.25)
    Q3 = df_clean[feature].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Filter data yang berada dalam batas normal
    df_clean = df_clean[(df_clean[feature] >= lower_bound) & (df_clean[feature] <= upper_bound)]

print(f"Jumlah data setelah hapus outlier: {df_clean.shape[0]}")

"""#### Univariate Analysis"""

numerical_features = df_clean.select_dtypes(include='number').columns
categorical_features = df_clean.select_dtypes(include='object').columns

print("Numerical Features:")
print(numerical_features)
print("\nCategorical Features:")
print(categorical_features)

feature = categorical_features[0]
count = df_clean[feature].value_counts()
percent = 100*df_clean[feature].value_counts(normalize=True)
df_sampel = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_sampel)
count.plot(kind='bar', title=feature);

"""**Insight:** Bedasarn distribusi di atas kategori *Male* memiliki jumlah terbanyak dengan presentase 52.2% sedangkan *Female* memiliki presentase 47.8%"""

feature = categorical_features[1]
count = df_clean[feature].value_counts()
percent = 100*df_clean[feature].value_counts(normalize=True)
df_sampel = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_sampel)
count.plot(kind='bar', title=feature);

"""**Insight:** Dapat disimpulkan bahwa bedasarkan barplot di atas *Normal weight* yang terbanyak dibandingkan kategori obesitas yg lain

#### visualisasi Numerical Features
"""

df.hist(bins=50, figsize=(20,15))
plt.show()

"""**Insight:** Data Height, Weight, dan BMI menunjukkan distribusi yang sehat untuk analisis prediktif/statistik.

### Exploratory Data Analysis - Multivariate Analysis

#### Categorical Features
"""

cat_features = df.select_dtypes(include='object').columns.to_list()
cat_features.remove("ObesityCategory")

for col in cat_features:
    plt.figure(figsize=(10, 5))
    sns.countplot(data=df, x=col, hue="ObesityCategory", palette="Set3")
    plt.title(f"Distribusi ObesityCategory berdasarkan {col}")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

"""**Insight:** Dari distibusi Gender di atas dapat dilihat bahwa *Male* cenderung lebih memiliki lebih banyak *Normalweight* dibanding *Female* dan *Female* lebih banyak memiliki kategori *Overweight* dibandingkan *Male*"""

sns.pairplot(df, diag_kind = 'kde')

"""**Insight:** pairplot ini menunjukan hubungan antara fitur numerik dan juga kategorikal. terlihat bahwa fitur Weight dan BMI memiliki korelasi yg positif dibandingkan fiturf-fitur yg dimiliki lainnnya"""

plt.figure(figsize=(10, 8))
correlation_matrix = df[numerical_features].corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='icefire', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""**Insight:** Terdapat korelasi yang sangat kuat antara Weight dan BMI (0.86), yang menunjukkan bahwa semakin berat seseorang, semakin tinggi nilai BMI-nya. Sementara itu, PhysicalActivityLevel memiliki korelasi yang sangat lemah terhadap semua fitur numerik lainnya. Hal ini mengindikasikan bahwa tingkat aktivitas fisik kemungkinan tidak berkaitan langsung dengan berat badan

# **Data preparation**
"""

# Encoding Gender
le_gender = LabelEncoder()
df_clean['Gender'] = le_gender.fit_transform(df_clean['Gender'])

# Simpan mapping Gender
gender_mapping = dict(zip(le_gender.classes_, le_gender.transform(le_gender.classes_)))
print("Gender Mapping:", gender_mapping)

# Encoding ObesityCategory
le_obesity = LabelEncoder()
df_clean['ObesityCategory'] = le_obesity.fit_transform(df_clean['ObesityCategory'])

# Simpan mapping ObesityCategory
obesity_mapping = dict(zip(le_obesity.classes_, le_obesity.transform(le_obesity.classes_)))
print("ObesityCategory Mapping:", obesity_mapping)

# Lihat hasil akhir
df_clean.head()

X = df_clean.drop('ObesityCategory', axis=1)
y = df_clean['ObesityCategory']

print(f'Jumlah shpae pada X: {X.shape}')
print(f'Jumlah shpae pada y: {y.shape}')

scaler = StandardScaler()
X = scaler.fit_transform(X)

"""# **Data Splitting**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""# **Modeling**"""

# Latih model SVM (Support Vector Machine)

svm = SVC(random_state=42)
svm.fit(X_train, y_train)

# Prediksi dengan SVM
y_pred_svm = svm.predict(X_test)

# Evaluasi SVM
print("SVM Test Accuracy:", accuracy_score(y_test, y_pred_svm))
print("\nSVM Classification Report:\n", classification_report(y_test, y_pred_svm, target_names=le_obesity.classes_))

"""**Insight:** Model SVM menunjukkan performa yang sangat baik dengan akurasi keseluruhan sebesar 94.35% pada data uji. Model mampu mengklasifikasikan keempat kategori berat badan dengan baik"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

y_pred_knn = knn.predict(X_test)

print("KNN Test Accuracy:", accuracy_score(y_test, y_pred_knn))
print("\nKNN Classification Report:\n", classification_report(y_test, y_pred_knn, target_names=le_obesity.classes_))

"""**Insight:** Model KNN menghasilkan akurasi sebesar 87.17% pada data uji, yang tergolong cukup baik namun masih berada di bawah performa model SVM 94.35%

# **Testing**
"""

# Fungsi untuk prediksi obesitas
def predict_obesity_category(new_data, scaler, svm, le_gender, le_obesity):
    new_data['Gender'] = le_gender.transform(new_data['Gender'])
    # Pilih fitur yang digunakan untuk prediksi (pastikan sesuai dengan data pelatihan)
    features = ['Age', 'Gender', 'Height', 'Weight', 'BMI', 'PhysicalActivityLevel']
    # Scaling data
    new_data_scaled = scaler.transform(new_data[features])
    # Prediksi dengan model SVM
    prediction_svm = svm.predict(new_data_scaled)
    # Decode hasil prediksi untuk label yang lebih mudah dibaca
    prediction_label = le_obesity.inverse_transform(prediction_svm)

def predict_obesity_category_knn(new_data, scaler, knn, le_gender, le_obesity):
    new_data_encoded = new_data.copy()
    if isinstance(new_data_encoded.loc[0, 'Gender'], (int, float)):
        gender_encoded = new_data_encoded['Gender']
    else:
        try:
            gender_encoded = le_gender.transform(new_data_encoded['Gender'])
        except ValueError as e:
            raise ValueError(f"Terjadi error saat encoding Gender: {e}. Pastikan nilai Gender valid dan sudah termasuk saat LabelEncoder dilatih.")

    new_data_encoded['Gender'] = gender_encoded

    # Ambil hanya fitur yang dibutuhkan dan skalakan
    features = ['Age', 'Gender', 'Height', 'Weight', 'BMI', 'PhysicalActivityLevel']
    scaled_data = scaler.transform(new_data_encoded[features])

    # Prediksi
    y_pred_encoded = knn.predict(scaled_data)
    predicted_category = le_obesity.inverse_transform(y_pred_encoded)[0]

    return predicted_category

# data baru
new_data = pd.DataFrame({
    'Age': [35],
    'Gender': ['Male'],
    'Height': [184],
    'Weight': [100],
    'BMI': [24.5],
    'PhysicalActivityLevel': [4]
})

# Prediksi kategori obesitas untuk data baru
predicted_category = predict_obesity_category_knn(new_data, scaler, knn, le_gender, le_obesity)

# Tampilkan hasil prediksi
print(f'Prediksi dengan ObesityCategory menggunakan KNN: {predicted_category}')

# Prediksi kategori obesitas untuk data baru
predicted_category = predict_obesity_category(new_data, scaler, svm, le_gender, le_obesity)

# Tampilkan hasil prediksi kategori obesitas
print(f'Prediksi dengan ObesityCategory menggunakan SVM: {predicted_category}')